{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2023-10-19T18:08:10.192331Z","iopub.execute_input":"2023-10-19T18:08:10.192743Z","iopub.status.idle":"2023-10-19T18:08:10.214752Z","shell.execute_reply.started":"2023-10-19T18:08:10.192715Z","shell.execute_reply":"2023-10-19T18:08:10.213323Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"/kaggle/input/movie-lens-small-latest-dataset/movies.csv\n/kaggle/input/movie-lens-small-latest-dataset/ratings.csv\n/kaggle/input/movie-lens-small-latest-dataset/README.txt\n/kaggle/input/movie-lens-small-latest-dataset/tags.csv\n/kaggle/input/movie-lens-small-latest-dataset/links.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nfrom scipy.sparse import csr_matrix\nfrom sklearn.neighbors import NearestNeighbors\n\nmovies = pd.read_csv(\"/kaggle/input/movie-lens-small-latest-dataset/movies.csv\")\nratings = pd.read_csv(\"/kaggle/input/movie-lens-small-latest-dataset/ratings.csv\")\n\nprint(movies.head())","metadata":{"execution":{"iopub.status.busy":"2023-10-19T18:08:10.536869Z","iopub.execute_input":"2023-10-19T18:08:10.537455Z","iopub.status.idle":"2023-10-19T18:08:10.870025Z","shell.execute_reply.started":"2023-10-19T18:08:10.537424Z","shell.execute_reply":"2023-10-19T18:08:10.868835Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"   movieId                               title  \\\n0        1                    Toy Story (1995)   \n1        2                      Jumanji (1995)   \n2        3             Grumpier Old Men (1995)   \n3        4            Waiting to Exhale (1995)   \n4        5  Father of the Bride Part II (1995)   \n\n                                        genres  \n0  Adventure|Animation|Children|Comedy|Fantasy  \n1                   Adventure|Children|Fantasy  \n2                               Comedy|Romance  \n3                         Comedy|Drama|Romance  \n4                                       Comedy  \n","output_type":"stream"}]},{"cell_type":"code","source":"print(movies.tail())","metadata":{"execution":{"iopub.status.busy":"2023-10-19T18:14:36.507759Z","iopub.execute_input":"2023-10-19T18:14:36.508192Z","iopub.status.idle":"2023-10-19T18:14:36.515731Z","shell.execute_reply.started":"2023-10-19T18:14:36.508162Z","shell.execute_reply":"2023-10-19T18:14:36.514467Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stdout","text":"      movieId                                      title  \\\n9737   193581  Black Butler: Book of the Atlantic (2017)   \n9738   193583               No Game No Life: Zero (2017)   \n9739   193585                               Flint (2017)   \n9740   193587        Bungo Stray Dogs: Dead Apple (2018)   \n9741   193609        Andrew Dice Clay: Dice Rules (1991)   \n\n                               genres  \n9737  Action|Animation|Comedy|Fantasy  \n9738         Animation|Comedy|Fantasy  \n9739                            Drama  \n9740                 Action|Animation  \n9741                           Comedy  \n","output_type":"stream"}]},{"cell_type":"code","source":"ratings.head()","metadata":{"execution":{"iopub.status.busy":"2023-10-19T18:08:21.136178Z","iopub.execute_input":"2023-10-19T18:08:21.136584Z","iopub.status.idle":"2023-10-19T18:08:21.148648Z","shell.execute_reply.started":"2023-10-19T18:08:21.136551Z","shell.execute_reply":"2023-10-19T18:08:21.147408Z"},"trusted":true},"execution_count":7,"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"   userId  movieId  rating  timestamp\n0       1        1     4.0  964982703\n1       1        3     4.0  964981247\n2       1        6     4.0  964982224\n3       1       47     5.0  964983815\n4       1       50     5.0  964982931","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>userId</th>\n      <th>movieId</th>\n      <th>rating</th>\n      <th>timestamp</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>1</td>\n      <td>4.0</td>\n      <td>964982703</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>3</td>\n      <td>4.0</td>\n      <td>964981247</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>6</td>\n      <td>4.0</td>\n      <td>964982224</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>47</td>\n      <td>5.0</td>\n      <td>964983815</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>50</td>\n      <td>5.0</td>\n      <td>964982931</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"final_dataset = ratings.pivot(index='movieId',columns='userId',values='rating')\nfinal_dataset.head()","metadata":{"execution":{"iopub.status.busy":"2023-10-15T07:47:59.343709Z","iopub.execute_input":"2023-10-15T07:47:59.344334Z","iopub.status.idle":"2023-10-15T07:47:59.457653Z","shell.execute_reply.started":"2023-10-15T07:47:59.344301Z","shell.execute_reply":"2023-10-15T07:47:59.456662Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"final_dataset.fillna(0,inplace=True)\nfinal_dataset.head()","metadata":{"execution":{"iopub.status.busy":"2023-10-15T07:48:36.616920Z","iopub.execute_input":"2023-10-15T07:48:36.617269Z","iopub.status.idle":"2023-10-15T07:48:36.658915Z","shell.execute_reply.started":"2023-10-15T07:48:36.617244Z","shell.execute_reply":"2023-10-15T07:48:36.657972Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"no_user_voted = ratings.groupby('movieId')['rating'].agg('count')\nno_movies_voted = ratings.groupby('userId')['rating'].agg('count')","metadata":{"execution":{"iopub.status.busy":"2023-10-15T07:50:59.977788Z","iopub.execute_input":"2023-10-15T07:50:59.978129Z","iopub.status.idle":"2023-10-15T07:50:59.989512Z","shell.execute_reply.started":"2023-10-15T07:50:59.978104Z","shell.execute_reply":"2023-10-15T07:50:59.988609Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import matplotlib.pyplot as plt","metadata":{"execution":{"iopub.status.busy":"2023-10-15T07:51:25.993990Z","iopub.execute_input":"2023-10-15T07:51:25.994356Z","iopub.status.idle":"2023-10-15T07:51:25.999705Z","shell.execute_reply.started":"2023-10-15T07:51:25.994330Z","shell.execute_reply":"2023-10-15T07:51:25.998241Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"f,ax = plt.subplots(1,1,figsize=(16,4))\n# ratings['rating'].plot(kind='hist')\nplt.scatter(no_user_voted.index,no_user_voted,color='mediumseagreen')\nplt.axhline(y=10,color='r')\nplt.xlabel('MovieId')\nplt.ylabel('No. of users voted')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-10-15T07:52:12.179553Z","iopub.execute_input":"2023-10-15T07:52:12.179877Z","iopub.status.idle":"2023-10-15T07:52:12.383165Z","shell.execute_reply.started":"2023-10-15T07:52:12.179853Z","shell.execute_reply":"2023-10-15T07:52:12.382183Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"final_dataset","metadata":{"execution":{"iopub.status.busy":"2023-10-15T07:59:29.587487Z","iopub.execute_input":"2023-10-15T07:59:29.587831Z","iopub.status.idle":"2023-10-15T07:59:29.625530Z","shell.execute_reply.started":"2023-10-15T07:59:29.587806Z","shell.execute_reply":"2023-10-15T07:59:29.624359Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"final_dataset = final_dataset.loc[no_user_voted[no_user_voted > 10].index,:]","metadata":{"execution":{"iopub.status.busy":"2023-10-15T08:13:32.855854Z","iopub.execute_input":"2023-10-15T08:13:32.856254Z","iopub.status.idle":"2023-10-15T08:13:32.870011Z","shell.execute_reply.started":"2023-10-15T08:13:32.856226Z","shell.execute_reply":"2023-10-15T08:13:32.868950Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"final_dataset.shape","metadata":{"execution":{"iopub.status.busy":"2023-10-15T08:13:45.662510Z","iopub.execute_input":"2023-10-15T08:13:45.663435Z","iopub.status.idle":"2023-10-15T08:13:45.670094Z","shell.execute_reply.started":"2023-10-15T08:13:45.663392Z","shell.execute_reply":"2023-10-15T08:13:45.668944Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"f,ax = plt.subplots(1,1,figsize=(16,4))\nplt.scatter(no_movies_voted.index,no_movies_voted,color='mediumseagreen')\nplt.axhline(y=50,color='r')\nplt.xlabel('UserId')\nplt.ylabel('No. of votes by user')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-10-15T08:14:08.096490Z","iopub.execute_input":"2023-10-15T08:14:08.097171Z","iopub.status.idle":"2023-10-15T08:14:08.284270Z","shell.execute_reply.started":"2023-10-15T08:14:08.097138Z","shell.execute_reply":"2023-10-15T08:14:08.283259Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"final_dataset = final_dataset.loc[:,no_movies_voted[no_movies_voted > 50].index]","metadata":{"execution":{"iopub.status.busy":"2023-10-15T08:15:15.083954Z","iopub.execute_input":"2023-10-15T08:15:15.084307Z","iopub.status.idle":"2023-10-15T08:15:15.095387Z","shell.execute_reply.started":"2023-10-15T08:15:15.084282Z","shell.execute_reply":"2023-10-15T08:15:15.094579Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"csr_data = csr_matrix(final_dataset.values)\nfinal_dataset.reset_index(inplace=True)","metadata":{"execution":{"iopub.status.busy":"2023-10-15T08:46:39.004078Z","iopub.execute_input":"2023-10-15T08:46:39.004529Z","iopub.status.idle":"2023-10-15T08:46:39.043002Z","shell.execute_reply.started":"2023-10-15T08:46:39.004473Z","shell.execute_reply":"2023-10-15T08:46:39.041917Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"help(csr_data)","metadata":{"execution":{"iopub.status.busy":"2023-10-15T09:20:52.205117Z","iopub.execute_input":"2023-10-15T09:20:52.206024Z","iopub.status.idle":"2023-10-15T09:20:52.222849Z","shell.execute_reply.started":"2023-10-15T09:20:52.205991Z","shell.execute_reply":"2023-10-15T09:20:52.221710Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"knn = NearestNeighbors(metric='cosine', algorithm='brute', n_neighbors=20, n_jobs=-1)\nknn.fit(csr_data)","metadata":{"execution":{"iopub.status.busy":"2023-10-15T08:47:00.585399Z","iopub.execute_input":"2023-10-15T08:47:00.585777Z","iopub.status.idle":"2023-10-15T08:47:00.605110Z","shell.execute_reply.started":"2023-10-15T08:47:00.585747Z","shell.execute_reply":"2023-10-15T08:47:00.603991Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def get_movie_recommendation(movie_name):\n    n_movies_to_reccomend = 10\n    movie_list = movies[movies['title'].str.contains(movie_name)]  \n    if len(movie_list):        \n        movie_idx= movie_list.iloc[0]['movieId']\n        movie_idx = final_dataset[final_dataset['movieId'] == movie_idx].index[0]\n        distances , indices = knn.kneighbors(csr_data[movie_idx],n_neighbors=n_movies_to_reccomend+1)    \n        rec_movie_indices = sorted(list(zip(indices.squeeze().tolist(),distances.squeeze().tolist())),key=lambda x: x[1])[:0:-1]\n        recommend_frame = []\n        for val in rec_movie_indices:\n            movie_idx = final_dataset.iloc[val[0]]['movieId']\n            idx = movies[movies['movieId'] == movie_idx].index\n            recommend_frame.append({'Title':movies.iloc[idx]['title'].values[0],'Distance':val[1]})\n        df = pd.DataFrame(recommend_frame,index=range(1,n_movies_to_reccomend+1))\n        return df\n    else:\n        return \"No movies found. Please check your input\"","metadata":{"execution":{"iopub.status.busy":"2023-10-15T08:48:34.725103Z","iopub.execute_input":"2023-10-15T08:48:34.725530Z","iopub.status.idle":"2023-10-15T08:48:34.734262Z","shell.execute_reply.started":"2023-10-15T08:48:34.725498Z","shell.execute_reply":"2023-10-15T08:48:34.733117Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"get_movie_recommendation('Casino')","metadata":{"execution":{"iopub.status.busy":"2023-10-15T08:50:42.649596Z","iopub.execute_input":"2023-10-15T08:50:42.650308Z","iopub.status.idle":"2023-10-15T08:50:42.693717Z","shell.execute_reply.started":"2023-10-15T08:50:42.650273Z","shell.execute_reply":"2023-10-15T08:50:42.692984Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"movies.title.value_counts()","metadata":{"execution":{"iopub.status.busy":"2023-10-15T08:50:08.933119Z","iopub.execute_input":"2023-10-15T08:50:08.933496Z","iopub.status.idle":"2023-10-15T08:50:08.950594Z","shell.execute_reply.started":"2023-10-15T08:50:08.933468Z","shell.execute_reply":"2023-10-15T08:50:08.949446Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"get_movie_recommendation('Memento')","metadata":{"execution":{"iopub.status.busy":"2023-10-15T09:15:22.336832Z","iopub.execute_input":"2023-10-15T09:15:22.337182Z","iopub.status.idle":"2023-10-15T09:15:22.379478Z","shell.execute_reply.started":"2023-10-15T09:15:22.337158Z","shell.execute_reply":"2023-10-15T09:15:22.378436Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Test","metadata":{}},{"cell_type":"code","source":"movies","metadata":{"execution":{"iopub.status.busy":"2023-10-19T18:18:56.005373Z","iopub.execute_input":"2023-10-19T18:18:56.008014Z","iopub.status.idle":"2023-10-19T18:18:56.031375Z","shell.execute_reply.started":"2023-10-19T18:18:56.007959Z","shell.execute_reply":"2023-10-19T18:18:56.030204Z"},"trusted":true},"execution_count":10,"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"      movieId                                      title  \\\n0           1                           Toy Story (1995)   \n1           2                             Jumanji (1995)   \n2           3                    Grumpier Old Men (1995)   \n3           4                   Waiting to Exhale (1995)   \n4           5         Father of the Bride Part II (1995)   \n...       ...                                        ...   \n9737   193581  Black Butler: Book of the Atlantic (2017)   \n9738   193583               No Game No Life: Zero (2017)   \n9739   193585                               Flint (2017)   \n9740   193587        Bungo Stray Dogs: Dead Apple (2018)   \n9741   193609        Andrew Dice Clay: Dice Rules (1991)   \n\n                                           genres  \n0     Adventure|Animation|Children|Comedy|Fantasy  \n1                      Adventure|Children|Fantasy  \n2                                  Comedy|Romance  \n3                            Comedy|Drama|Romance  \n4                                          Comedy  \n...                                           ...  \n9737              Action|Animation|Comedy|Fantasy  \n9738                     Animation|Comedy|Fantasy  \n9739                                        Drama  \n9740                             Action|Animation  \n9741                                       Comedy  \n\n[9742 rows x 3 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>movieId</th>\n      <th>title</th>\n      <th>genres</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>Adventure|Animation|Children|Comedy|Fantasy</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>Jumanji (1995)</td>\n      <td>Adventure|Children|Fantasy</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>Grumpier Old Men (1995)</td>\n      <td>Comedy|Romance</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>Waiting to Exhale (1995)</td>\n      <td>Comedy|Drama|Romance</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>Father of the Bride Part II (1995)</td>\n      <td>Comedy</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>9737</th>\n      <td>193581</td>\n      <td>Black Butler: Book of the Atlantic (2017)</td>\n      <td>Action|Animation|Comedy|Fantasy</td>\n    </tr>\n    <tr>\n      <th>9738</th>\n      <td>193583</td>\n      <td>No Game No Life: Zero (2017)</td>\n      <td>Animation|Comedy|Fantasy</td>\n    </tr>\n    <tr>\n      <th>9739</th>\n      <td>193585</td>\n      <td>Flint (2017)</td>\n      <td>Drama</td>\n    </tr>\n    <tr>\n      <th>9740</th>\n      <td>193587</td>\n      <td>Bungo Stray Dogs: Dead Apple (2018)</td>\n      <td>Action|Animation</td>\n    </tr>\n    <tr>\n      <th>9741</th>\n      <td>193609</td>\n      <td>Andrew Dice Clay: Dice Rules (1991)</td>\n      <td>Comedy</td>\n    </tr>\n  </tbody>\n</table>\n<p>9742 rows × 3 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity\n\n# assuming df is your DataFrame and it has a 'genres' column\nmovies['genres'] = movies['genres'].apply(lambda x: ' '.join(x.split('|')))","metadata":{"execution":{"iopub.status.busy":"2023-10-19T18:19:32.451853Z","iopub.execute_input":"2023-10-19T18:19:32.452318Z","iopub.status.idle":"2023-10-19T18:19:32.486740Z","shell.execute_reply.started":"2023-10-19T18:19:32.452283Z","shell.execute_reply":"2023-10-19T18:19:32.485448Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"code","source":"movies.head(10)","metadata":{"execution":{"iopub.status.busy":"2023-10-19T18:19:42.726122Z","iopub.execute_input":"2023-10-19T18:19:42.726558Z","iopub.status.idle":"2023-10-19T18:19:42.739651Z","shell.execute_reply.started":"2023-10-19T18:19:42.726525Z","shell.execute_reply":"2023-10-19T18:19:42.738651Z"},"trusted":true},"execution_count":12,"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"   movieId                               title  \\\n0        1                    Toy Story (1995)   \n1        2                      Jumanji (1995)   \n2        3             Grumpier Old Men (1995)   \n3        4            Waiting to Exhale (1995)   \n4        5  Father of the Bride Part II (1995)   \n5        6                         Heat (1995)   \n6        7                      Sabrina (1995)   \n7        8                 Tom and Huck (1995)   \n8        9                 Sudden Death (1995)   \n9       10                    GoldenEye (1995)   \n\n                                        genres  \n0  Adventure Animation Children Comedy Fantasy  \n1                   Adventure Children Fantasy  \n2                               Comedy Romance  \n3                         Comedy Drama Romance  \n4                                       Comedy  \n5                        Action Crime Thriller  \n6                               Comedy Romance  \n7                           Adventure Children  \n8                                       Action  \n9                    Action Adventure Thriller  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>movieId</th>\n      <th>title</th>\n      <th>genres</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>Adventure Animation Children Comedy Fantasy</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>Jumanji (1995)</td>\n      <td>Adventure Children Fantasy</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>Grumpier Old Men (1995)</td>\n      <td>Comedy Romance</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>Waiting to Exhale (1995)</td>\n      <td>Comedy Drama Romance</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>Father of the Bride Part II (1995)</td>\n      <td>Comedy</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>6</td>\n      <td>Heat (1995)</td>\n      <td>Action Crime Thriller</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>7</td>\n      <td>Sabrina (1995)</td>\n      <td>Comedy Romance</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>8</td>\n      <td>Tom and Huck (1995)</td>\n      <td>Adventure Children</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>9</td>\n      <td>Sudden Death (1995)</td>\n      <td>Action</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>10</td>\n      <td>GoldenEye (1995)</td>\n      <td>Action Adventure Thriller</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# create the CountVectorizer instance\nvectorizer = CountVectorizer()\n\n# fit and transform the genres\ngenre_matrix = vectorizer.fit_transform(movies['genres'])\n\n# calculate the cosine similarities\ncosine_sim = cosine_similarity(genre_matrix, genre_matrix)","metadata":{"execution":{"iopub.status.busy":"2023-10-19T18:19:51.336909Z","iopub.execute_input":"2023-10-19T18:19:51.337386Z","iopub.status.idle":"2023-10-19T18:19:54.246581Z","shell.execute_reply.started":"2023-10-19T18:19:51.337326Z","shell.execute_reply":"2023-10-19T18:19:54.245480Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"cosine_sim","metadata":{"execution":{"iopub.status.busy":"2023-10-19T18:20:09.642416Z","iopub.execute_input":"2023-10-19T18:20:09.642816Z","iopub.status.idle":"2023-10-19T18:20:09.652222Z","shell.execute_reply.started":"2023-10-19T18:20:09.642787Z","shell.execute_reply":"2023-10-19T18:20:09.651044Z"},"trusted":true},"execution_count":16,"outputs":[{"execution_count":16,"output_type":"execute_result","data":{"text/plain":"array([[1.        , 0.77459667, 0.31622777, ..., 0.        , 0.31622777,\n        0.4472136 ],\n       [0.77459667, 1.        , 0.        , ..., 0.        , 0.        ,\n        0.        ],\n       [0.31622777, 0.        , 1.        , ..., 0.        , 0.        ,\n        0.70710678],\n       ...,\n       [0.        , 0.        , 0.        , ..., 1.        , 0.        ,\n        0.        ],\n       [0.31622777, 0.        , 0.        , ..., 0.        , 1.        ,\n        0.        ],\n       [0.4472136 , 0.        , 0.70710678, ..., 0.        , 0.        ,\n        1.        ]])"},"metadata":{}}]},{"cell_type":"code","source":"# function to get recommendations based on a movie title\ndef get_recommendations(title):\n    idx = movies[movies['title'] == title].index[0]\n    sim_scores = list(enumerate(cosine_sim[idx]))\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n    sim_scores = sim_scores[0:11]  # get top 10 similar movies\n    movie_indices = [i[0] for i in sim_scores]\n    movie_scores = [i[1] for i in sim_scores]\n    recommendations = movies[['title', 'genres']].iloc[movie_indices]\n    recommendations_df = pd.DataFrame(recommendations)\n    recommendations_df['similarity_score'] = movie_scores\n    return recommendations_df","metadata":{"execution":{"iopub.status.busy":"2023-10-19T18:41:18.415973Z","iopub.execute_input":"2023-10-19T18:41:18.416341Z","iopub.status.idle":"2023-10-19T18:41:18.423957Z","shell.execute_reply.started":"2023-10-19T18:41:18.416312Z","shell.execute_reply":"2023-10-19T18:41:18.422710Z"},"trusted":true},"execution_count":44,"outputs":[]},{"cell_type":"code","source":"# get recommendations for a movxie\nget_recommendations('Monkeybone (2001)')","metadata":{"execution":{"iopub.status.busy":"2023-10-19T18:41:23.019543Z","iopub.execute_input":"2023-10-19T18:41:23.019979Z","iopub.status.idle":"2023-10-19T18:41:23.043525Z","shell.execute_reply.started":"2023-10-19T18:41:23.019945Z","shell.execute_reply":"2023-10-19T18:41:23.041954Z"},"trusted":true},"execution_count":45,"outputs":[{"execution_count":45,"output_type":"execute_result","data":{"text/plain":"                                                  title  \\\n3098                                  Monkeybone (2001)   \n4558  Triplets of Belleville, The (Les triplettes de...   \n4841                                  Cool World (1992)   \n7199              Mickey's Once Upon a Christmas (1999)   \n7368                 South Park: Imaginationland (2008)   \n8725                         Daddy, I'm A Zombie (2012)   \n8999                                   Anomalisa (2015)   \n9665                          Porky in Wackyland (1938)   \n9738                       No Game No Life: Zero (2017)   \n870                                 Lesson Faust (1994)   \n4874                          Allegro non troppo (1977)   \n\n                                genres  similarity_score  \n3098          Animation Comedy Fantasy          1.000000  \n4558          Animation Comedy Fantasy          1.000000  \n4841          Animation Comedy Fantasy          1.000000  \n7199          Animation Comedy Fantasy          1.000000  \n7368          Animation Comedy Fantasy          1.000000  \n8725          Animation Comedy Fantasy          1.000000  \n8999          Animation Comedy Fantasy          1.000000  \n9665          Animation Comedy Fantasy          1.000000  \n9738          Animation Comedy Fantasy          1.000000  \n870     Animation Comedy Drama Fantasy          0.866025  \n4874  Animation Comedy Fantasy Musical          0.866025  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>title</th>\n      <th>genres</th>\n      <th>similarity_score</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>3098</th>\n      <td>Monkeybone (2001)</td>\n      <td>Animation Comedy Fantasy</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>4558</th>\n      <td>Triplets of Belleville, The (Les triplettes de...</td>\n      <td>Animation Comedy Fantasy</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>4841</th>\n      <td>Cool World (1992)</td>\n      <td>Animation Comedy Fantasy</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>7199</th>\n      <td>Mickey's Once Upon a Christmas (1999)</td>\n      <td>Animation Comedy Fantasy</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>7368</th>\n      <td>South Park: Imaginationland (2008)</td>\n      <td>Animation Comedy Fantasy</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>8725</th>\n      <td>Daddy, I'm A Zombie (2012)</td>\n      <td>Animation Comedy Fantasy</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>8999</th>\n      <td>Anomalisa (2015)</td>\n      <td>Animation Comedy Fantasy</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>9665</th>\n      <td>Porky in Wackyland (1938)</td>\n      <td>Animation Comedy Fantasy</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>9738</th>\n      <td>No Game No Life: Zero (2017)</td>\n      <td>Animation Comedy Fantasy</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>870</th>\n      <td>Lesson Faust (1994)</td>\n      <td>Animation Comedy Drama Fantasy</td>\n      <td>0.866025</td>\n    </tr>\n    <tr>\n      <th>4874</th>\n      <td>Allegro non troppo (1977)</td>\n      <td>Animation Comedy Fantasy Musical</td>\n      <td>0.866025</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}